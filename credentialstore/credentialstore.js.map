{"version":3,"sources":["../src/credentialstore/credentialstore.ts"],"names":[],"mappings":"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","file":"credentialstore.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n*  Copyright (c) Microsoft Corporation. All rights reserved.\r\n*  Licensed under the MIT License. See License.txt in the project root for license information.\r\n*--------------------------------------------------------------------------------------------*/\r\n\"use strict\";\r\n\r\nimport * as os from \"os\";\r\nimport * as Q from \"q\";\r\n\r\nimport { LinuxFileApi } from \"./linux/linux-file-api\";\r\nimport { OsxKeychainApi } from \"./osx/osx-keychain-api\";\r\nimport { WindowsCredentialStoreApi } from \"./win32/win-credstore-api\";\r\nimport { ICredentialStore } from \"./interfaces/icredentialstore\";\r\nimport { Credential } from \"./credential\";\r\n\r\n/**\r\n * Implements a credential storage for Windows, Mac (darwin), or Linux.\r\n *\r\n * Allows a single credential to be stored per service (that is, one username per service);\r\n */\r\nexport class CredentialStore implements ICredentialStore {\r\n    private _credentialStore: ICredentialStore;\r\n    private _filename: string;\r\n    private _folder: string;\r\n    private _prefix: string;\r\n    private _defaultPrefix: string = \"secret:\";\r\n    private _defaultFilename: string = \"secrets.json\";\r\n    private _defaultFolder: string = \".secrets\";\r\n\r\n    constructor(prefix?: string, folder?: string, filename?: string) {\r\n        if (prefix !== undefined) {\r\n            this._prefix = prefix;\r\n        }\r\n        if (folder !== undefined) {\r\n            this._folder = folder;\r\n        }\r\n        if (filename !== undefined) {\r\n            this._filename = filename;\r\n        }\r\n\r\n        // In the case of win32 or darwin, this._folder will contain the prefix.\r\n        switch (os.platform()) {\r\n            case \"win32\":\r\n                if (prefix === undefined) {\r\n                    this._prefix = this._defaultPrefix;\r\n                }\r\n                this._credentialStore = new WindowsCredentialStoreApi(this._prefix);\r\n                break;\r\n            case \"darwin\":\r\n                if (prefix === undefined) {\r\n                    this._prefix = this._defaultPrefix;\r\n                }\r\n                this._credentialStore = new OsxKeychainApi(this._prefix);\r\n                break;\r\n            /* tslint:disable:no-switch-case-fall-through */\r\n            case \"linux\":\r\n            default:\r\n            /* tslint:enable:no-switch-case-fall-through */\r\n                if (folder === undefined) {\r\n                    this._folder = this._defaultFolder;\r\n                }\r\n                if (filename === undefined) {\r\n                    this._filename = this._defaultFilename;\r\n                }\r\n                this._credentialStore = new LinuxFileApi(this._folder, this._filename);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public GetCredential(service: string) : Q.Promise<Credential> {\r\n        return this._credentialStore.GetCredential(service);\r\n    }\r\n\r\n    public SetCredential(service: string, username: string, password: any) : Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n\r\n        // First, look to see if we have a credential for this service already.  If so, remove it\r\n        // since we don't know if the user is changing the username or the password (or both) for\r\n        // the particular service.\r\n        this.GetCredential(service).then((cred) => {\r\n            if (cred !== undefined) {\r\n                // On Windows, \"*\" will delete all matching credentials in one go\r\n                // On Linux, we use 'underscore' to remove the ones we want to remove and save the leftovers\r\n                // On Mac, \"*\" will find all matches and delete each individually\r\n                this.RemoveCredential(service).then(() => {\r\n                    this._credentialStore.SetCredential(service, username, password).then(() => {\r\n                        deferred.resolve(undefined);\r\n                    }).catch((reason) => {\r\n                        deferred.reject(reason);\r\n                    });\r\n                });\r\n            } else {\r\n                this._credentialStore.SetCredential(service, username, password).then(() => {\r\n                    deferred.resolve(undefined);\r\n                }).catch((reason) => {\r\n                    deferred.reject(reason);\r\n                });\r\n            }\r\n        }).catch((reason) => {\r\n            deferred.reject(reason);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public RemoveCredential(service: string) : Q.Promise<void> {\r\n        return this._credentialStore.RemoveCredential(service);\r\n    }\r\n\r\n    // Used by tests to ensure certain credentials we create don't exist\r\n    public getCredentialByName(service: string, username: string) : Q.Promise<Credential> {\r\n        return this._credentialStore.getCredentialByName(service, username);\r\n    }\r\n\r\n    // Used by tests to remove certain credentials\r\n    public removeCredentialByName(service: string, username: string) : Q.Promise<void> {\r\n        return this._credentialStore.removeCredentialByName(service, username);\r\n    }\r\n}\r\n"],"sourceRoot":"C:\\Users\\jorit\\Desktop\\vsts-vscode\\out"}