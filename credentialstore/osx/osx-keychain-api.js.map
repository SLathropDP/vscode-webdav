{"version":3,"sources":["../src/credentialstore/osx/osx-keychain-api.ts"],"names":[],"mappings":"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","file":"osx-keychain-api.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n*  Copyright (c) Microsoft Corporation. All rights reserved.\r\n*  Licensed under the MIT License. See License.txt in the project root for license information.\r\n*--------------------------------------------------------------------------------------------*/\r\n\"use strict\";\r\n\r\nimport { Credential } from \"../credential\";\r\nimport { ICredentialStore } from \"../interfaces/icredentialstore\";\r\n\r\nimport * as Q from \"q\";\r\n\r\n/* tslint:disable:no-var-keyword */\r\nvar osxkeychain = require(\"./osx-keychain\");\r\n/* tslint:enable:no-var-keyword */\r\n\r\n/*\r\n    Provides the ICredentialStore API on top of OSX keychain-based storage.\r\n\r\n    User can provide a custom prefix for the credential.\r\n */\r\nexport class OsxKeychainApi implements ICredentialStore {\r\n    private _prefix: string;\r\n\r\n    constructor(credentialPrefix: string) {\r\n        if (credentialPrefix !== undefined) {\r\n            this._prefix = credentialPrefix;\r\n            osxkeychain.setPrefix(credentialPrefix);\r\n        }\r\n    }\r\n\r\n    public GetCredential(service: string) : Q.Promise<Credential> {\r\n        const deferred: Q.Deferred<Credential> = Q.defer<Credential>();\r\n        let credential: Credential;\r\n\r\n        // To get the credential, I must first list all of the credentials we previously\r\n        // stored there.  Find the one we want, then go and ask for the secret.\r\n        this.listCredentials().then((credentials) => {\r\n            // Spin through the returned credentials to ensure I got the one I want\r\n            // based on passed in 'service'\r\n            for (let index: number = 0; index < credentials.length; index++) {\r\n                if (credentials[index].Service === service) {\r\n                    credential = credentials[index];\r\n                    break;\r\n                }\r\n            }\r\n            if (credential !== undefined) {\r\n                //Go get the password\r\n                osxkeychain.get(credential.Username, credential.Service, function(err, cred) {\r\n                    if (err) {\r\n                        deferred.reject(err);\r\n                    }\r\n                    if (cred !== undefined) {\r\n                        credential = new Credential(credential.Service, credential.Username, cred);\r\n                        deferred.resolve(credential);\r\n                    }\r\n                });\r\n            } else {\r\n                deferred.resolve(undefined);\r\n            }\r\n        }).fail((reason) => {\r\n            deferred.reject(reason);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public SetCredential(service: string, username: string, password: string) : Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n\r\n        // I'm not supporting a description so pass \"\" for that parameter\r\n        osxkeychain.set(username, service, \"\" /*description*/, password, function(err) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n            } else {\r\n                deferred.resolve(undefined);\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public RemoveCredential(service: string) : Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n\r\n        this.removeCredentials(service).then(() => {\r\n            deferred.resolve(undefined);\r\n        })\r\n        .fail((reason) => {\r\n            deferred.reject(reason);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public getCredentialByName(service: string, username: string) : Q.Promise<Credential> {\r\n        const deferred: Q.Deferred<Credential> = Q.defer<Credential>();\r\n        let credential: Credential;\r\n\r\n        // To get the credential, I must first list all of the credentials we previously\r\n        // stored there.  Find the one we want, then go and ask for the secret.\r\n        this.listCredentials().then((credentials) => {\r\n            // Spin through the returned credentials to ensure I got the one I want\r\n            // based on passed in 'service'\r\n            for (let index: number = 0; index < credentials.length; index++) {\r\n                if (credentials[index].Service === service && credentials[index].Username === username) {\r\n                    credential = credentials[index];\r\n                    break;\r\n                }\r\n            }\r\n            if (credential !== undefined) {\r\n                //Go get the password\r\n                osxkeychain.get(credential.Username, credential.Service, function(err, cred) {\r\n                    if (err) {\r\n                        deferred.reject(err);\r\n                    }\r\n                    if (cred !== undefined) {\r\n                        credential = new Credential(credential.Service, credential.Username, cred);\r\n                        deferred.resolve(credential);\r\n                    }\r\n                });\r\n            } else {\r\n                deferred.resolve(undefined);\r\n            }\r\n        }).fail((reason) => {\r\n            deferred.reject(reason);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public removeCredentialByName(service: string, username: string) : Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n\r\n        // if username === \"*\", we need to remove all credentials for this service.\r\n        if (username === \"*\") {\r\n            this.removeCredentials(service).then(() => {\r\n                deferred.resolve(undefined);\r\n            })\r\n            .fail((reason) => {\r\n                deferred.reject(reason);\r\n            });\r\n        } else {\r\n            osxkeychain.remove(username, service, \"\" /*description*/, function(err) {\r\n                if (err) {\r\n                    if (err.code !== undefined && err.code === 44) {\r\n                        // If credential is not found, don't fail.\r\n                        deferred.resolve(undefined);\r\n                    } else {\r\n                        deferred.reject(err);\r\n                    }\r\n                } else {\r\n                    deferred.resolve(undefined);\r\n                }\r\n            });\r\n        }\r\n        return deferred.promise;\r\n    }\r\n\r\n    private removeCredentials(service: string): Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n\r\n        // listCredentials will return all of the credentials for this prefix and service\r\n        this.listCredentials(service).then((creds) => {\r\n            if (creds !== undefined && creds.length > 0) {\r\n                // Remove all of these credentials\r\n                const promises: Q.Promise<void>[] = [];\r\n                creds.forEach((cred) => {\r\n                    promises.push(this.removeCredentialByName(cred.Service, cred.Username));\r\n                });\r\n                Q.all(promises).then(() => {\r\n                    deferred.resolve(undefined);\r\n                });\r\n            } else {\r\n                deferred.resolve(undefined);\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    private listCredentials(service? : string) : Q.Promise<Array<Credential>> {\r\n        const deferred: Q.Deferred<Array<Credential>> = Q.defer<Array<Credential>>();\r\n        const credentials: Array<Credential> = [];\r\n\r\n        const stream = osxkeychain.list();\r\n        stream.on(\"data\", (cred) => {\r\n            // Don't return all credentials, just ones that start\r\n            // with our prefix and optional service\r\n            if (cred.svce !== undefined) {\r\n                if (cred.svce.indexOf(this._prefix) === 0) {\r\n                    const svc: string = cred.svce.substring(this._prefix.length);\r\n                    const username: string = cred.acct;\r\n                    //password is undefined because we don't have it yet\r\n                    const credential: Credential = new Credential(svc, username, undefined);\r\n\r\n                    // Only add the credential if we want them all or it's a match on service\r\n                    if (service === undefined || service === svc) {\r\n                        credentials.push(credential);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        stream.on(\"end\", () => {\r\n            deferred.resolve(credentials);\r\n        });\r\n        stream.on(\"error\", (error) => {\r\n            console.log(error);\r\n            deferred.reject(error);\r\n        });\r\n\r\n        return deferred.promise;\r\n    }\r\n}\r\n"],"sourceRoot":"C:\\Users\\jorit\\Desktop\\vsts-vscode\\out"}