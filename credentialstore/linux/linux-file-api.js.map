{"version":3,"sources":["../src/credentialstore/linux/linux-file-api.ts"],"names":[],"mappings":"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","file":"linux-file-api.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n*  Copyright (c) Microsoft Corporation. All rights reserved.\r\n*  Licensed under the MIT License. See License.txt in the project root for license information.\r\n*--------------------------------------------------------------------------------------------*/\r\n\"use strict\";\r\n\r\nimport { FileTokenStorage } from \"./file-token-storage\";\r\nimport { Credential } from \"../credential\";\r\nimport { ICredentialStore } from \"../interfaces/icredentialstore\";\r\n\r\nimport * as Q from \"q\";\r\nimport * as os from \"os\";\r\nimport * as path from \"path\";\r\nimport * as _ from \"underscore\";\r\n\r\n/*\r\n    Provides the ICredentialStore API on top of file-based storage.\r\n    Does not support any kind of 'prefix' of the credential (since its\r\n    storage mechanism is not shared with either Windows or OSX).\r\n\r\n    User must provide a custom folder and custom file name for storage.\r\n */\r\nexport class LinuxFileApi implements ICredentialStore {\r\n    private _folder: string;\r\n    private _filename: string;\r\n    private _fts: FileTokenStorage;\r\n\r\n    constructor(folder: string, filename: string) {\r\n        this._folder = folder;\r\n        this._filename = filename;\r\n        this._fts = new FileTokenStorage(path.join(path.join(os.homedir(), this._folder, this._filename)));\r\n    }\r\n\r\n    public GetCredential(service: string) : Q.Promise<Credential> {\r\n        const deferred: Q.Deferred<Credential> = Q.defer<Credential>();\r\n\r\n        this.loadCredentials().then((entries) => {\r\n            // Find the entry I want based on service\r\n            const entryArray: Array<any> = _.where(entries, { service: service });\r\n            if (entryArray !== undefined && entryArray.length > 0) {\r\n                const credential: Credential = this.createCredential(entryArray[0]);\r\n                deferred.resolve(credential);\r\n            } else {\r\n                deferred.resolve(undefined);\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public SetCredential(service: string, username: string, password: string) : Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n\r\n        this.loadCredentials().then((entries) => {\r\n            // Remove any entries that are the same as the one I'm about to add\r\n            const existingEntries = _.reject(entries, function(elem) {\r\n                return elem.username === username && elem.service === service;\r\n            });\r\n            const newEntry = {\r\n                username: username,\r\n                password: password,\r\n                service: service\r\n            };\r\n            this._fts.AddEntries([ newEntry ], existingEntries).then(() => {\r\n                deferred.resolve(undefined);\r\n            }).catch((err) => {\r\n                deferred.reject(err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public RemoveCredential(service: string) : Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n\r\n        this.loadCredentials().then((entries) => {\r\n            // Find the entry being asked to be removed; if found, remove it, save the remaining list\r\n            const existingEntries = _.reject(entries, function(elem) {\r\n                return elem.service === service;\r\n            });\r\n            // TODO: RemoveEntries doesn't do anything with second arg.  For now, do nothing to\r\n            // the api as I'm wrapping it in all its glory.  Could consider later.\r\n            this._fts.RemoveEntries(existingEntries /*, undefined*/).then(() => {\r\n                deferred.resolve(undefined);\r\n            }).catch((err) => {\r\n                deferred.reject(err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public getCredentialByName(service: string, username: string) : Q.Promise<Credential> {\r\n        const deferred: Q.Deferred<Credential> = Q.defer<Credential>();\r\n\r\n        this.loadCredentials().then((entries) => {\r\n            // Find the entry I want based on service and username\r\n            const entryArray: Array<any> = _.where(entries, { service: service, username: username });\r\n            if (entryArray !== undefined && entryArray.length > 0) {\r\n                const credential: Credential = this.createCredential(entryArray[0]);\r\n                deferred.resolve(credential);\r\n            } else {\r\n                deferred.resolve(undefined);\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public removeCredentialByName(service: string, username: string) : Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n\r\n        this.loadCredentials().then((entries) => {\r\n            // Find the entry being asked to be removed; if found, remove it, save the remaining list\r\n            const existingEntries = _.reject(entries, function(elem) {\r\n                if (username === \"*\") {\r\n                    return elem.service === service;\r\n                } else {\r\n                    return elem.username === username && elem.service === service;\r\n                }\r\n            });\r\n            // TODO: RemoveEntries doesn't do anything with second arg.  For now, do nothing to\r\n            // the api as I'm wrapping it in all its glory.  Could consider later.\r\n            this._fts.RemoveEntries(existingEntries /*, undefined*/).then(() => {\r\n                deferred.resolve(undefined);\r\n            }).catch((err) => {\r\n                deferred.reject(err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    private createCredential(cred: any) : Credential {\r\n        return new Credential(cred.service, cred.username, cred.password);\r\n    }\r\n\r\n    private loadCredentials() : Q.Promise<any> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n\r\n        this._fts.LoadEntries().then((entries) => {\r\n            deferred.resolve(entries);\r\n        })\r\n        .catch((err) => {\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n}\r\n"],"sourceRoot":"C:\\Users\\jorit\\Desktop\\vsts-vscode\\out"}