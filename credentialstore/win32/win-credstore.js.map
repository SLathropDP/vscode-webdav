{"version":3,"sources":["../src/credentialstore/win32/win-credstore.js"],"names":[],"mappings":"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","file":"win-credstore.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n*  Copyright (c) Microsoft Corporation. All rights reserved.\r\n*  Licensed under the MIT License. See License.txt in the project root for license information.\r\n*--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n\r\n//\r\n// Wrapper module around Windows credential store.\r\n// Uses the creds.exe program.\r\n//\r\n\r\nvar _ = require('underscore');\r\nvar childProcess = require('child_process');\r\nvar es = require('event-stream');\r\nvar path = require('path');\r\n\r\nvar parser = require('./win-credstore-parser');\r\n\r\nvar credExePath = path.join(__dirname, '../bin/win32/creds.exe');\r\n\r\nvar targetNamePrefix = '';\r\n\r\n// Allow callers to set their own prefix\r\nfunction setPrefix(prefix) {\r\n  targetNamePrefix = prefix;\r\n}\r\n\r\nfunction ensurePrefix(targetName) {\r\n  if (targetName.slice(targetNamePrefix.length) !== targetNamePrefix) {\r\n    targetName = targetNamePrefix + targetName;\r\n  }\r\n  return targetName;\r\n}\r\n\r\nfunction removePrefix(targetName) {\r\n  return targetName.slice(targetNamePrefix.length);\r\n}\r\n\r\n/**\r\n * list the contents of the credential store, parsing each value.\r\n *\r\n * We ignore everything that wasn't put there by us, we look\r\n * for target names starting with the target name prefix.\r\n *\r\n *\r\n * @return {Stream} object mode stream of credentials.\r\n */\r\nfunction list() {\r\n  var credsProcess = childProcess.spawn(credExePath,['-s', '-g', '-t', targetNamePrefix + '*']);\r\n  return credsProcess.stdout\r\n    .pipe(parser())\r\n    .pipe(es.mapSync(function (cred) {\r\n      cred.targetName = removePrefix(cred.targetName);\r\n      return cred;\r\n    }));\r\n}\r\n\r\n/**\r\n * Get details for a specific credential. Assumes generic credential.\r\n *\r\n * @param {string} targetName target name for credential\r\n * @param {function (err, credential)} callback callback function that receives\r\n *                                              returned credential.\r\n */\r\nfunction get(targetName, callback) {\r\n  var args = [\r\n    '-s',\r\n    '-t', ensurePrefix(targetName)\r\n  ];\r\n\r\n  var credsProcess = childProcess.spawn(credExePath, args);\r\n  var result = null;\r\n  var errors = [];\r\n\r\n  credsProcess.stdout.pipe(parser())\r\n    .on('data', function (credential) {\r\n      result = credential;\r\n      result.targetName = removePrefix(result.targetName);\r\n    });\r\n\r\n  credsProcess.stderr.pipe(es.split())\r\n    .on('data', function (line) {\r\n      errors.push(line);\r\n    });\r\n\r\n  credsProcess.on('exit', function (code) {\r\n    if (code === 0) {\r\n      callback(null, result);\r\n    } else {\r\n      callback(new Error('Getting credential failed, exit code ' + code + ': ' + errors.join(', ')));\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set the credential for a given key in the credential store.\r\n * Creates or updates, assumes generic credential.\r\n * If credential is buffer, stores buffer contents as binary directly.\r\n * If credential is string, stores UTF-8 encoded binary.\r\n *\r\n * @param {String} targetName target name for entry\r\n * @param {Buffer|String} credential the credential\r\n * @param {Function(err)} callback completion callback\r\n */\r\n function set(targetName, credential, callback) {\r\n  if (_.isString(credential)) {\r\n    credential = new Buffer(credential, 'utf8');\r\n  }\r\n  var args = [\r\n    '-a',\r\n    '-t', ensurePrefix(targetName),\r\n    '-p', credential.toString('hex')\r\n  ];\r\n\r\n  childProcess.execFile(credExePath, args,\r\n    function (err) {\r\n      callback(err);\r\n    });\r\n }\r\n\r\n /**\r\n  * Remove the given key from the credential store.\r\n  *\r\n  * @param {string} targetName target name to remove.\r\n  *                            if ends with \"*\" character,\r\n  *                            will delete all targets\r\n  *                            starting with that prefix\r\n  * @param {Function(err)} callback completion callback\r\n  */\r\nfunction remove(targetName, callback) {\r\n  var args = [\r\n    '-d',\r\n    '-t', ensurePrefix(targetName)\r\n  ];\r\n\r\n  if (targetName.slice(-1) === '*') {\r\n    args.push('-g');\r\n  }\r\n\r\n  childProcess.execFile(credExePath, args,\r\n    function (err) {\r\n      callback(err);\r\n    });\r\n}\r\n\r\n_.extend(exports, {\r\n  list: list,\r\n  set: set,\r\n  get: get,\r\n  remove: remove,\r\n  setPrefix: setPrefix\r\n});\r\n"],"sourceRoot":"C:\\Users\\jorit\\Desktop\\vsts-vscode\\out"}