{"version":3,"sources":["../src/credentialstore/win32/win-credstore-api.ts"],"names":[],"mappings":"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","file":"win-credstore-api.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n*  Copyright (c) Microsoft Corporation. All rights reserved.\r\n*  Licensed under the MIT License. See License.txt in the project root for license information.\r\n*--------------------------------------------------------------------------------------------*/\r\n\"use strict\";\r\n\r\nimport { Credential } from \"../credential\";\r\nimport { ICredentialStore } from \"../interfaces/icredentialstore\";\r\n\r\nimport * as Q from \"q\";\r\n/* tslint:disable:no-var-keyword */\r\nvar wincredstore = require(\"./win-credstore\");\r\n/* tslint:enable:no-var-keyword */\r\n\r\n/*\r\n    Provides the ICredentialStore API on top of Windows Credential Store-based storage.\r\n\r\n    User can provide a custom prefix for the credential.\r\n */\r\nexport class WindowsCredentialStoreApi implements ICredentialStore {\r\n    private static separator: string = \"|\";\r\n\r\n    constructor(credentialPrefix: string) {\r\n        if (credentialPrefix !== undefined) {\r\n            wincredstore.setPrefix(credentialPrefix);\r\n        }\r\n    }\r\n\r\n    public GetCredential(service: string) : Q.Promise<Credential> {\r\n        const deferred: Q.Deferred<Credential> = Q.defer<Credential>();\r\n        let credential: Credential;\r\n\r\n        //TODO: Why not just have listCredentials send back the ones I want based on (optional) service?\r\n        this.listCredentials().then((credentials) => {\r\n            //Spin through the returned credentials to ensure I got the one I want based on passed in 'service'\r\n            for (let index: number = 0; index < credentials.length; index++) {\r\n                credential = this.createCredential(credentials[index]);\r\n                if (credential.Service === service) {\r\n                    break;\r\n                } else {\r\n                    // The current credential isn't the one we're looking for\r\n                    credential = undefined;\r\n                }\r\n            }\r\n            deferred.resolve(credential);\r\n        }).fail((reason) => {\r\n            deferred.reject(reason);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public SetCredential(service: string, username: string, password: any) : Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n        const targetName: string = this.createTargetName(service, username);\r\n\r\n        // Here, `password` is either the password or pat\r\n        wincredstore.set(targetName, password, function(err) {\r\n            if (err) {\r\n                deferred.reject(err);\r\n            } else {\r\n                deferred.resolve(undefined);\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public RemoveCredential(service: string) : Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n        const targetName: string = this.createTargetName(service, \"*\");\r\n\r\n        wincredstore.remove(targetName, function(err) {\r\n            if (err) {\r\n                if (err.code !== undefined && err.code === 1168) {\r\n                    //code 1168: not found\r\n                    // If credential isn't found, don't fail.\r\n                    deferred.resolve(undefined);\r\n                } else {\r\n                    deferred.reject(err);\r\n                }\r\n            } else {\r\n                deferred.resolve(undefined);\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    // Adding for test purposes (to ensure a particular credential doesn't exist)\r\n    public getCredentialByName(service: string, username: string) : Q.Promise<Credential> {\r\n        const deferred: Q.Deferred<Credential> = Q.defer<Credential>();\r\n        let credential: Credential;\r\n\r\n        this.listCredentials().then((credentials) => {\r\n            //Spin through the returned credentials to ensure I got the one I want based on passed in 'service'\r\n            for (let index: number = 0; index < credentials.length; index++) {\r\n                credential = this.createCredential(credentials[index]);\r\n                if (credential.Service === service && credential.Username === username) {\r\n                    break;\r\n                } else {\r\n                    // The current credential isn't the one we're looking for\r\n                    credential = undefined;\r\n                }\r\n            }\r\n            deferred.resolve(credential);\r\n        }).fail((reason) => {\r\n            deferred.reject(reason);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    public removeCredentialByName(service: string, username: string) : Q.Promise<void> {\r\n        const deferred: Q.Deferred<void> = Q.defer<void>();\r\n        const targetName: string = this.createTargetName(service, username);\r\n\r\n        wincredstore.remove(targetName, function(err) {\r\n            if (err) {\r\n                if (err.code !== undefined && err.code === 1168) {\r\n                    //code 1168: not found\r\n                    // If credential isn't found, don't fail.\r\n                    deferred.resolve(undefined);\r\n                } else {\r\n                    deferred.reject(err);\r\n                }\r\n            } else {\r\n                deferred.resolve(undefined);\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    private createCredential(cred: any) : Credential {\r\n        const password: string = new Buffer(cred.credential, \"hex\").toString(\"utf8\");\r\n        // http://servername:port|\\\\domain\\username\r\n        const segments: Array<string> = cred.targetName.split(WindowsCredentialStoreApi.separator);\r\n        const username: string = segments[segments.length - 1];\r\n        const service: string = segments[0];\r\n        return new Credential(service, username, password);\r\n    }\r\n\r\n    private createTargetName(service: string, username: string) : string {\r\n        return service + WindowsCredentialStoreApi.separator + username;\r\n    }\r\n\r\n    private listCredentials() : Q.Promise<Array<any>> {\r\n        const deferred: Q.Deferred<Array<any>> = Q.defer<Array<any>>();\r\n        const credentials: Array<any> = [];\r\n\r\n        const stream = wincredstore.list();\r\n        stream.on(\"data\", (cred) => {\r\n            credentials.push(cred);\r\n        });\r\n        stream.on(\"end\", () => {\r\n            deferred.resolve(credentials);\r\n        });\r\n        stream.on(\"error\", (error) => {\r\n            console.log(error);\r\n            deferred.reject(error);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n}\r\n"],"sourceRoot":"C:\\Users\\jorit\\Desktop\\vsts-vscode\\out"}